Linguaggio delle espressioni

e Exp::= n | e + e | e * e | e - e

kompile exp.k 
krun example.exp dove example è il nostro "programma"

nella cartella k/builtins ci sono delle grammatiche gia' definite

In un linguaggio senza side-effects è indifferente usare seqstrict e strict
strict(n): valuta categoria sintattica in posizione n fintantochè non raggiunge un terminale. Poi cerca una regola sintattica da valutare
strict(1): 1 valutato fino alla fine -> quando diventa Int cerco una regola

e ::= ... | if (e) e1 else e2 | Bool


$PGM variabile globale di K che indica il programma che deve essere eseguito

~ -> Alt + 5

krun --debugger ex.imp
> p fa uno step

x -> []1 + 4 -> x = []2
strict(1) -> lo mette in cima, lo valuta fino alla fine ... 

Debugger per semantica statica (Lezione 3) -> step : s e poi p
Implementare for (statement exp: exp){c} -> scrivere sia semantica statica che dinamica

Per aggiungere lo scoping delle variabili dobbiamo inserire gli ambienti. L'idea è quella di permettere dichiarazioni locali di variabili 
Ad ogni blocco si crea una visibilità  -> dobbiamo dividere tra Store ed Environment. In K, arrivo in un blocco, alla fine di esso
dobbiamo ripristinare l'ambiente precedente all'apertura del blocco stesso. 
{ S } => S ~> E  //Esegui S ma ricordati che poi devi ripristinare l'environment vecchio
<env> E </env>

Dichiarazione multipla:
 	int x1, x2, x3, ..., xn=e;
 	x1 -> 1 1 -> e
 	x2 -> 2 2 -> e
 	....


 Provare a fare la dichiarazione di variabile senza inizializzazione
 -> inizializza di default a 0